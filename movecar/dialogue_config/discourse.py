from . import DialogueConfig

class Discourse(DialogueConfig):
    """
    话术映射类
    """

    def __init__(self):

        self.mapping = {
            "001": "很抱歉，智能客服未能准确获取您的信息，将为您转接人工客服，请稍等。",  #（转人工）
            "002": "很抱歉，我没听清楚，您能再说一遍吗？",   # 移车信息确认环节（没听清）
            "101": "您好，我是妖妖四智能移车客服，请问您是需要移车吗？请回答是的，或者不是。",  #（移车需求确认）
            "102": "我不明白您的意思，您是否要移车呢，请您回答是的或不是。",  # （移车需求再次询问）
            "103": "非移车需求，请重新拨打114进行选择，感谢你的来电，再见！",  # （非移车需求挂机）-
            "201": "每次来电可以为您通知一位车主移车，请问对方的车牌颜色是蓝色还是绿色？",  #（询问车牌颜色）-
            "202": "每次来电可以为您通知一位车主移车，请问对方的车牌颜色是蓝色还是绿色？",  #（车牌颜色再次询问）-
            "203": "很抱歉，我们只对绿色、黄色、蓝色车牌提供移车服务，感谢您的来电。",  # （车牌颜色不符合条件）-
            "301": "请用普通话说出完整的车牌号码", # （询问车牌号码）-
            "302": "很抱歉，请重新再说一遍完整的车牌号码。",  # （车牌号码再次询问，没有识别到车牌号码）-
            "303": "很抱歉，请重新再说一遍完整的车牌号码。",  # （车牌号码再次询问，车牌号码过长）- 
            "304": "很抱歉，请重新再说一遍完整的车牌号码。",  # （车牌号码再次询问，车牌号码没有完整识别）-
            "305": "很抱歉，妖妖四移车只对广东省内粤开头的车辆进行移车，感谢您的使用，欢迎下次来电！",  #（非广东车牌）-
            "306": "很抱歉，妖妖四移车只对广东省内粤开头的车辆进行移车，感谢您的使用，欢迎下次来电！",  #（省外车牌）-
            "307": "请仔细核对需要移车的号码为%s，信息正确请回答是的，信息错误请回答不是。", ## （车牌信息确认）（注-%s处为占位符，只可配置其他文字）
            "308": "我不明白您的意思，如果信息无误请回答是的进行确认，如果信息有误，回答不是将为您转接人工客服处理。",  #  （车牌信息再次确认）-
            "309": "很抱歉，联系不上车主，如紧急情况请拨打110，感谢您的来电，再见",  #（车牌号码不存在）-
            "310": "您好，由于您累计下单次数已超过当天允许的次数，请通过其他渠道通知车主，谢谢！",  #（下单次数超出当天数量限制）-
            "311": "您好，由于该车牌累计移车次数已超过当天允许的次数，请通过其他渠道通知车主，谢谢！",  # （车牌累计下单次数超出限制）- 
            "312": "您好，由于您对该车牌的累计下单次数已超过当天允许的次数，请通过其他渠道通知车主，谢谢！",  #（单人对车牌累计下单次数超出限制）-
            "313": "您好，您的移车请求正在处理中，请耐心等待或通过关注【车主通】公众号点击114移车查询处理进度，谢谢！",  # （移车请求正在处理中）-
            "401": "请说出移车地址在哪个城市哪个区镇？", # （询问移车城市）-
            "402": "请问移车地址在%s市哪个区镇？",  # （注-%s处为占位符，只可配置其他文字）（询问区信息）-
            "403": "很抱歉，请再说一遍移车地址在哪个城市哪个区镇？如广州市花都区。",  # 移车城市环节重新询问城市和区镇
            "404": "很抱歉，请再说一遍在哪个区镇？如%s。",  # 行政区域环节重新询问区镇
            "501": "请问您的移车原因是什么？",  # （询问移车原因）- 
            "601": "请问联系的手机号码是多少",  # （询问联系方式-手机号码）-
            "602": "请说一下您的电话号码",   # （再次询问联系方式）-
            "603": "您说的号码不足11位，请提供完整的11位手机号码",  # （联系电话位数不符合要求）-
            "701": "我们将尽快通知该车主前往处理，感谢您的来电",  # （通知车主已经下单）-
        }

    def get(self, key):
        """
        根据key的内容获取相应的口径
        """
        return "[se40]" + self.mapping[key] + "[se40]"


    def reload(self):
        """
        从数据库中加载话术的相关配置
        """
        self.__init__()
        conn = self._get_connection()
        sql = "SELECT * FROM caliber_define"
        cursor = conn.cursor()
        cursor.execute(sql)

        # 数据库字段 correct_mode： calib_content：口径内容，pro_id：口径编号
        for _, calib_content, pro_id, _ in cursor:
            # 307, 402口径中需要有占位符
            if pro_id in ["307", "402", "404"] and "%s" not in calib_content:
                continue

            if pro_id in self.mapping:
                self.mapping[pro_id] = calib_content


discourse_config = Discourse()